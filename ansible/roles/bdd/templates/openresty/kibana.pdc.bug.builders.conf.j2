server {
  listen 80;
  server_name kibana.pdc.bug.builders;
  return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name kibana.pdc.bug.builders;
    access_log  /var/log/kibana.pdc.bug.builders.access.log;
    error_log  /var/log/kibana.pdc.bug.builders.error.log;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-A384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_session_cache shared:SSL:20m;
    ssl_session_timeout 180m;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/kibana.pdc.bug.builders/chain.pem;
    resolver 1.1.1.1 8.8.8.8;

    ssl_certificate /etc/letsencrypt/live/kibana.pdc.bug.builders/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/kibana.pdc.bug.builders/privkey.pem;

    add_header Strict-Transport-Security "max-age=31536000" always;

    set $session_secret "{{kibana_session_secret}}";
    set $session_name "sso_openresty";

    location / {
        set $new_cookie $http_cookie;

        access_by_lua_block {

            local resty_sha256 = require "resty.sha256"
            local str = require "resty.string"
            local cjson = require("cjson")

            local opts = {
                redirect_uri = "https://kibana.pdc.bug.builders/redirect_uri",
                client_secret = "{{sso.client_secret}}",
                client_id = "{{sso.client_id}}",
                discovery = "https://bug-builders.eu.auth0.com/.well-known/openid-configuration",
                token_signing_alg_values_expected = { "RS256" },
                scope = "openid email profile",
                iat_slack = 600,
                redirect_uri_scheme = "https",
                logout_path = "/logout",
                token_endpoint_auth_method = "client_secret_basic",
                ssl_verify = "yes",
                accept_none_alg = false,
                accept_unsupported_alg = false,
                refresh_session_interval = 3500,
                access_token_expires_in = 3600,
                session_contents = {access_token=true, user=true},
                renew_access_token_on_expiry = true,
                force_reauthorize = false,
                timeout = 2000,
                use_nonce = false,
                redirect_after_logout_uri = "https://bug-builders.eu.auth0.com/v2/logout?client_id={{sso.client_id}}&redirectTo=https://kibana.pdc.bug.builders/",
                revoke_tokens_on_logout = true,
                authorization_params = {
                  access_type = "offline",
                },
            }

            local res, err = require("resty.openidc").authenticate(opts)
            if err or not res or not res.user then
                ngx.status = 500
                ngx.say(err)
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            local allowed_emails = {"{{kibana_allowed_emails | default([]) | join('", "')}}"}

            local function has_value (tab, tab2)
                for index, value in ipairs(tab) do
                    for index2, value2 in ipairs(tab2) do
                        if value == value2 then
                            return true
                        end
                    end
                end
                return false
            end

            if not has_value({res.user.email}, allowed_emails) then
                ngx.log(ngx.ERR, cjson.encode(res.user));
                ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            {% if kibana_sso_header is defined %}
              ngx.req.set_header("{{kibana_sso_header}}", res.user.email)
            {% endif %}

            local a = ngx.re.match(ngx.var.new_cookie, '(.*)(?:^|;)\\s*sso_openresty[^=]*=[^;]+(.*)');
            while a ~= nil do
              ngx.var.new_cookie = a[1]..a[2]
              a = ngx.re.match(ngx.var.new_cookie, '(.*)(?:^|;)\\s*sso_openresty[^=]*=[^;]+(.*)');
            end
        }

        proxy_set_header Cookie $new_cookie;
        proxy_pass http://127.0.0.1:5601;
        proxy_http_version      1.1;
        proxy_set_header        Host              $host;
        proxy_set_header        X-Real-IP         $remote_addr;
        proxy_set_header        X-Real-Port       $remote_port;
        proxy_set_header        X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
    }
}
